// Generated by CoffeeScript 1.6.3
(function() {
  var configuration, createSignalingChannel, gotDescription, iceCandidates, localStream, pc, pubnub, remoteView, selfView, signalingChannel, start, uuid;

  pubnub = PUBNUB.init({
    publish_key: 'pub-c-e26bd37f-0e9b-49db-a2d0-3ce7dada8563',
    subscribe_key: 'sub-c-4860a7f8-ced1-11e2-b70f-02ee2ddab7fe'
  });

  uuid = pubnub.uuid();

  console.log(uuid);

  createSignalingChannel = function() {
    var signaler;
    signaler = {};
    pubnub.subscribe({
      channel: 'signaler',
      callback: function(msg) {
        msg = JSON.parse(msg);
        if (msg.uuid !== uuid) {
          if (!!signaler.onmessage) {
            return signaler.onmessage(msg);
          }
        }
      }
    });
    signaler.send = function(msg) {
      msg.uuid = uuid;
      console.log("sending", msg);
      msg = JSON.stringify(msg);
      return pubnub.publish({
        channel: 'signaler',
        message: msg
      });
    };
    return signaler;
  };

  selfView = document.querySelector('#local');

  localStream = null;

  navigator.webkitGetUserMedia({
    audio: true,
    video: true
  }, function(stream) {
    selfView.src = URL.createObjectURL(stream);
    selfView.play();
    return localStream = stream;
  });

  signalingChannel = createSignalingChannel();

  pc = null;

  configuration = null;

  remoteView = document.querySelector('#remote');

  iceCandidates = [];

  gotDescription = function(desc) {
    pc.setLocalDescription(desc);
    return signalingChannel.send({
      "sdp": desc
    });
  };

  start = function(isCaller) {
    pc = new webkitRTCPeerConnection(configuration);
    pc.addStream(localStream);
    pc.onicecandidate = function(evt) {
      return signalingChannel.send({
        "candidate": evt.candidate
      });
    };
    pc.onaddstream = function(evt) {
      console.log("Got stream");
      remoteView.src = URL.createObjectURL(evt.stream);
      return remoteView.play();
    };
    if (isCaller) {
      return pc.createOffer(gotDescription);
    }
  };

  signalingChannel.onmessage = function(evt) {
    var candidate, signal, wasPc, _i, _len;
    signal = evt;
    wasPc = pc !== null;
    if (!pc) {
      start(false);
    }
    console.log(signal);
    if (signal.sdp) {
      pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));
      for (_i = 0, _len = iceCandidates.length; _i < _len; _i++) {
        candidate = iceCandidates[_i];
        pc.addIceCandidate(new RTCIceCandidate(candidate));
      }
      if (!wasPc) {
        return pc.createAnswer(gotDescription);
      }
    } else {
      if (pc.remoteDescription != null) {
        return pc.addIceCandidate(new RTCIceCandidate(signal.candidate));
      } else {
        return iceCandidates.push(signal.candidate);
      }
    }
  };

  document.querySelector('#start').onclick = function(evt) {
    return start(true);
  };

}).call(this);
